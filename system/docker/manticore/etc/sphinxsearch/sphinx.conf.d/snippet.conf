#!/bin/sh
set -eu
cat <<EOF

#################
# this index's, sole purpose is to run updates. So that the real index can connect to replica/slave

source snippet_master : db_master
{
        sql_query_pre           = REPLACE INTO sph_counter SELECT 'snippet', MAX(snippet_id),'$HOSTNAME' as server_id, NOW() FROM snippet

        #something really trivial, but got most compatiblity, return a text field. Never searched, so doesnt matter what contains
        # the 15 seconds, is HOPEFULLY to give the slave time to catch up.
        sql_query = SELECT snippet_id,title,sleep(15) AS dummy FROM snippet WHERE enabled = 1 LIMIT 1
}

#################

source snippet_main : db_slave
{
        sql_query_pre           = SET CHARACTER SET 'utf8'
        sql_query_pre           = SET SESSION query_cache_type=OFF
        sql_query_pre           = SET SESSION group_concat_max_len = 100000

	sql_query_pre           = SELECT GET_LOCK(CONCAT('snippet',DATABASE()),1000)
	sql_query_pre           = DO SLEEP(RAND()*5)

	##still need to create the ids table as the query uses it (in main+delta)
	sql_query_pre           = \
                CREATE TEMPORARY TABLE snippet_ids (primary key(snippet_id)) \
		SELECT snippet_id FROM snippet WHERE enabled = 1

	sql_query_range         = SELECT 1, @max_doc_id := max_doc_id FROM sph_counter WHERE counter_id='snippet' and server_id='$HOSTNAME'
	sql_range_step          = 2500

        sql_query               = \
                SELECT snippet_id,if(s.title='','none',s.title) as title,if(s.comment='','none',s.comment) as comment,if(s.grid_reference='','none',s.grid_reference) as grid_reference, \
		CRC32(LOWER(s.title)) AS titlecrc, \
		s.user_id,u.realname,GROUP_CONCAT(gs.gridimage_id) AS gridimage_id, snippet_id AS id, \
		GROUP_CONCAT(DISTINCT gi.grid_reference) AS image_square, COUNT(distinct gs.gridimage_id) AS images, \
		SUBSTRING(s.grid_reference,1,LENGTH(s.grid_reference)-4) AS myriad, \
                CONCAT(SUBSTRING(s.grid_reference,1,LENGTH(s.grid_reference)-3),SUBSTRING(s.grid_reference,LENGTH(s.grid_reference)-1,1)) AS hectad, \
                RADIANS(s.wgs84_lat) AS wgs84_lat,RADIANS(s.wgs84_long) AS wgs84_long \
                FROM snippet s \
			INNER JOIN snippet_ids USING (snippet_id) \
                        LEFT JOIN gridimage_snippet gs USING (snippet_id) \
			LEFT JOIN user u ON (s.user_id = u.user_id) \
			LEFT JOIN gridimage_search gi ON (gs.gridimage_id = gi.gridimage_id) \
                WHERE enabled = 1 \
		AND s.snippet_id>=\$start AND s.snippet_id<=\$end \
                GROUP BY snippet_id ORDER BY null

	sql_query_post          = SELECT RELEASE_LOCK(CONCAT('snippet',DATABASE()))

	sql_field_string	= title
        sql_attr_uint           = user_id
        sql_attr_uint           = titlecrc
        sql_attr_uint           = images
        sql_attr_float          = wgs84_lat
        sql_attr_float          = wgs84_long
}

############################################


source snippet_delta : db_slave
{
        sql_query_pre           = SET CHARACTER SET 'utf8'
        sql_query_pre           = SET SESSION query_cache_type=OFF
        sql_query_pre           = SET SESSION group_concat_max_len = 100000

        sql_query_pre           = SELECT GET_LOCK(CONCAT('snippet',DATABASE()),1000)
        sql_query_pre           = DO SLEEP(RAND()*5)

	sql_query_pre           = SELECT @max_doc_id := max_doc_id,@updated := updated FROM sph_counter WHERE counter_id='snippet' and server_id='$HOSTNAME'

	sql_query_pre           = \
                CREATE TEMPORARY TABLE snippet_ids (primary key(snippet_id)) \
		SELECT snippet_id FROM snippet WHERE enabled = 1 AND snippet_id > @max_doc_id

	sql_query_pre           = INSERT IGNORE INTO snippet_ids SELECT distinct snippet_id FROM gridimage_snippet WHERE created >= @updated

        sql_query_range         = SELECT MIN(snippet_id), MAX(snippet_id) FROM snippet_ids
        sql_range_step          = 5000

	##we dont need to duplicate the sql_query/attibutes, as used the 'range' to filter
}

############################################

index snippet_master
{
        type                    = plain
        source                  = snippet_master
        path                    = /var/lib/manticore/data/snippet_master
        docinfo                 = none
}

index snippet_main : latin1plus_encoded
{
	type			= plain
        source                  = snippet_main
        path                    = /var/lib/manticore/data/snippet_main

        morphology              = stem_en
        index_exact_words       = 1
        min_word_len            = 1

	dict = keywords
	min_infix_len = 2
	expand_keywords = 0 # shouldnt automatically expand
}

index snippet_delta : snippet_main
{
        type                    = plain
        source                  = snippet_delta
        path                    = /var/lib/manticore/data/snippet_delta
}

############################################
# a distributed index with same name as original single index, so queries dont change!

index snippet {
        type = distributed
        local = snippet_main
        local = snippet_delta
}

EOF


